name: Release

# 定义运行工作流程的事件。每当推送到主分支或手动触发时都会触发此工作流程。
on:
  push:
    branches:
      - main # 只在主分支上运行
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout # 检查出仓库代码
        uses: actions/checkout@v2

      - name: Setup Node.js # 设置 Node.js 环境
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Install Dependencies # 安装依赖
        run: npm install

      - name: Build App # 构建应用程序
        run: npm run build

      - name: Create Release Tag # 创建发布标签
        id: create_tag
        uses: mathieudutour/github-tag-action@v5.1.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ github.run_number }} # 使用 GitHub Actions 提供的 RUN_NUMBER 自动构建版本号
          tag_message: Release v${{ github.run_number }}

      - name: Create Release Notes # 自动生成发布说明
        id: release_notes
        uses: eddiejaoude/steps-github-release-notes@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          previous_release_tag_name: '' # 如果是第一个版本，则该参数为空字符串；否则为前一个标记名称。
          version_tag_name: ${{ steps.create_tag.outputs.tag_name }} # 使用刚刚创建的标记名称来计算差异。
          exclude_labels: 'duplicate,question,invalid,wontfix' # 忽略这些 GitHub 标签。
          header_label_map: | # 映射 GitHub 标签到更好的显示格式。
            breaking = :boom: Breaking Changes 
            enhancement = :rocket: Enhancements 
            bug = :bug: Bug Fixes 
            documentation = :memo: Documentation Updates 
            internal = :house_with_garden: Internal

      - name: Release on GitHub # 在 GitHub 上发布新版本
        uses: softprops/action-gh-release@v1.4.3
        with:
          files_glob: 'dist/*' # 包含编译后应用程序文件的 glob 表达式。
          body_file_path: ${{ steps.release_notes.outputs.body_path }} # 发布说明文本的路径。
          name_template: '${{ steps.create_tag.outputs.tag_name }}' # 命名模板使用最新的 Git 标记名称。
          tag_name: ${{ steps.create_tag.outputs.tag_name }} # 新标记的名称，与上述命名模板相同。
#  这个工作流程将在 `push` 主分支时触发，并执行以下操作：
#  1. 检查出仓库代码；
#  2. 安装依赖并构建应用程序；
#  3. 创建一个新的 Git 标签来表示发布，并将其推送到仓库；
#  4. 自动生成发布说明，其中包括与以前标签之间的差异；
#  5. 创建 GitHub 发布，包含生成的发行说明和编译后的应用程序文件。
#
#  要使用此工作流，您需要做以下几件事情：
#
#  1. 将上面显示的 YAML 代码复制到 `.github/workflows/release.yml` 文件中；
#  2. 确保您有权限访问仓库的 secrets 中的 `GITHUB_TOKEN`；
#  3. 执行您的发布工作流。可以通过手动触发或在主分支上进行推送来完成。当工作流完成时，您将看到一个新的发布页面（如果是第一次发布，则无需人工合并加载）。
#
#  注意：此工作流适用于适量的更改。如果你经常发布多个版本，请考虑使用专业的持续交付软件（例如 Travis CI 或 CircleCI）。
